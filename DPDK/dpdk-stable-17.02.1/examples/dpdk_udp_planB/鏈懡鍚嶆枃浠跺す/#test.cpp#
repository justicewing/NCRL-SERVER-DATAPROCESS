#include <iostream>  
#include <stdlib.h>
#include <sys/types.h>
#include <stdio.h>
#include <sys/socket.h>
#include <linux/in.h>
#include <stdbool.h>
#include <stdint.h>
#include <sys/time.h>
#include <math.h>
#include <time.h>

typedef unsigned char byte;
double fast_exp(double y);
double fast_pow(double a, double b);
int fxexp(int x);
double exp1(double x);
double MyExp(double y);
double FastLog(double x);

int main() {
  /*
   	printf("Storage size for char : %d \n", sizeof(char));
   	printf("Storage size for int : %d \n", sizeof(int));
   	printf("Storage size for short : %d \n", sizeof(short));
   	printf("Storage size for bool : %d \n", sizeof(bool));
   	byte c = 0xFF;
   	if(c == 255) printf("right\n");
   	//循环移位
   	printf("%d\n", (unsigned char)c>>9);
    byte a = 0xFF;
    unsigned char b = 0xFF;
    int d = (int)a + (int)b;
    printf("%d\n",d);
    
    //test
    //printf("test\n");
    //unsigned char *ch = "1234567890";
    //*ch = 0xff;
    //short *sh = (short*)ch;
	//sh[0] = 0xFFFF;
	//*(sh + 1) = 0x0000;
    //printf("%s\n", sh + 1);
    
    
    uint8_t *in = (uint8_t *)malloc(sizeof(uint8_t) * 10);
    for(int i = 0; i < 10; ++i){
    	in[i] = i;
    }
    uint32_t *sh1 = (uint32_t*)in;
    printf("%X\n", *(sh1+1));
    
    short num = 385;
    unsigned char ch2 = num>>8;
   	printf("%d\n", ch2);
   	
   	//fast exp
   	int x = -2.55;
   	int y = 1.88;
   	
   	struct timeval t1, t2;
	gettimeofday(&t1, NULL);
   	for(int i = 0; i < 10000000; ++i){
   		//fast_pow(2.7777,x);
   		MyExp(x);
   		//exp1(x);
   	}
   	gettimeofday(&t2, NULL);
	double time1 = t2.tv_sec-t1.tv_sec + (double)(t2.tv_usec-t1.tv_usec) / 1000000;
	printf("The time of fast pow is %lf s\n", time1);
	
	
	gettimeofday(&t1, NULL);
   	for(int i = 0; i < 10000000; ++i){
   		exp(x);
   	}
   	gettimeofday(&t2, NULL);
	double time2 = t2.tv_sec-t1.tv_sec + (double)(t2.tv_usec-t1.tv_usec) / 1000000;
	printf("The time of pow is %lf s\n", time2);
   	printf("exp = %lf\n",exp1(x));
   	
   	
	gettimeofday(&t1, NULL);
   	for(int i = 0; i < 10000000; ++i){
   		FastLog(y);
   	}
   	gettimeofday(&t2, NULL);
	double time3 = t2.tv_sec-t1.tv_sec + (double)(t2.tv_usec-t1.tv_usec) / 1000000;
	printf("The time of fast log is %lf s\n", time3);
	
	
	gettimeofday(&t1, NULL);
   	for(int i = 0; i < 10000000; ++i){
   		log10(y);
   	}
   	gettimeofday(&t2, NULL);
	double time4 = t2.tv_sec-t1.tv_sec + (double)(t2.tv_usec-t1.tv_usec) / 1000000;
	printf("The time of log is %lf s\n", time4);
   	printf("exp = %lf\n",log10(y));
   	
   	//for(int i = 1; i <= 1000; ++i){
   	//	printf("%lf,", 10 * log10(-log((double)i / 1000)));
   	//	if(i >= 100 && i % 100 == 0) printf("\n");
   	//}
   
   	//double beta_table[15] = { 1.58, 1.48, 1.45, 1.36, 1.57, 1.5, 3.61, 4.75, 6.25, 11.84, 16.32, 24.39, 29.1, 31.82, 35.11 };
   	//for(int i = 0; i < 10; ++i){
   	//	printf("%lf,", 10 * log10(beta_table[i]));
   	//}
   	unsigned char sss = 1400;
   	printf("%d\n",1400>>8);
  */	
   	//生成文件
   	FILE *file = fopen("data_in.txt", "w");
   	if(file == NULL) /*判断文件是否打开成功*/
		printf("File open error\n");
   	srand((unsigned) time(NULL));
   	for(int i = 0; i < 500; ++i){
   		int number = rand() % 256;
   		fprintf(file, "%d ", number);
   	}
   	fclose(file);
   	return 0;
}


inline double fast_exp(double y) {
    double d;
    *(reinterpret_cast<int*>(&d) + 0) = 0;
    *(reinterpret_cast<int*>(&d) + 1) = static_cast<int>(1512775 * y + 1072632447);
    return d;
}

inline double fast_pow(double a, double b) {
  union {
    double d;
    int x[2];
  } u = { a };
  u.x[1] = (int)(b * (u.x[1] - 1072632447) + 1072632447);
  u.x[0] = 0;
  return u.d;
}


inline int fxexp(int x) {
  int t,y;

  y=0x00010000;
  t=x-0x58b91; if(t>=0) x=t,y<<=8;
  t=x-0x2c5c8; if(t>=0) x=t,y<<=4;
  t=x-0x162e4; if(t>=0) x=t,y<<=2;
  t=x-0x0b172; if(t>=0) x=t,y<<=1;
  t=x-0x067cd; if(t>=0) x=t,y+=y>>1;
  t=x-0x03920; if(t>=0) x=t,y+=y>>2;
  t=x-0x01e27; if(t>=0) x=t,y+=y>>3;
  t=x-0x00f85; if(t>=0) x=t,y+=y>>4;
  t=x-0x007e1; if(t>=0) x=t,y+=y>>5;
  t=x-0x003f8; if(t>=0) x=t,y+=y>>6;
  t=x-0x001fe; if(t>=0) x=t,y+=y>>7;
  if(x&0x100)               y+=y>>8;
  if(x&0x080)               y+=y>>9;
  if(x&0x040)               y+=y>>10;
  if(x&0x020)               y+=y>>11;
  if(x&0x010)               y+=y>>12;
  if(x&0x008)               y+=y>>13;
  if(x&0x004)               y+=y>>14;
  if(x&0x002)               y+=y>>15;
  if(x&0x001)               y+=y>>16;
  return y;
}

inline double exp1(double x) {
  x = 1.0 + x / 256.0;
  x *= x; x *= x; x *= x; x *= x;
  x *= x; x *= x; x *= x; x *= x;
  return x;
}


inline double MyExp(double y)
{
    double result;
    *((int *)(&result) + 0) = 0;
    *((int *)(&result) + 1) = 1512775 * y + 1072632447;
    return result;
}

inline double FastLog(double x)
{
    double m;
    int k = 1, op = 2;
    if (x <= 1)     return 0;
    while ((x / op) >= 2)
    {
        op <<= 1;
        k++;
    }
    m = x / op - 1;
    if (m <= 0.25)      return 1.3125 * m + k;
    else if (m <= 0.5)  return 1.078125 * m + 0.00015625 + k;
    else if (m <= 0.75) return 1.015625 * m + 0.0625 + k;
    else if (m <= 1)    return 0.75 * m + 0.25 + k;
    else                return 0; 
}


	//data_in->data = (byte*)malloc(sizeof(byte) * 5614);
	//测试***************************************
	//FILE *file = fopen("data_in.txt", "r+");
	//for(int i = 0; i < 5614; ++i){
	//	fscanf(file, "%c", &data_in->data[i]);
	//}
	//fgets(data_in->data, 5614, file);
	//data_in->length = 5614;
	//********************************************

